import os
import json
import uvicorn
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
IMAGE_PATH = "zamzam.png"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
USERS_FILE = "users.json"

# –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å —Ñ–æ—Ç–æ
MESSAGE_TEXT = """üåà –°–≤–æ–±–æ–¥–∞ –±—ã—Ç—å —Å–æ–±–æ–π.
–í –º–∏—Ä–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π –¥–æ—Å—Ç–æ–∏–Ω –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –ª—é–±–≤–∏, —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Å–∏–ª–∞. –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ —Å–º–µ–ª–æ—Å—Ç—å –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º ‚Äî –≤—Å—ë —ç—Ç–æ –æ –Ω—ë–º. –û–Ω –Ω–µ –±–æ–∏—Ç—Å—è –≤—ã–¥–µ–ª–∞—Ç—å—Å—è, –Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–µ–º, –∫—Ç–æ –æ–Ω –µ—Å—Ç—å.
#Pride #LoveIsLove #LGBTQ #–ë—É–¥—å–°–æ–±–æ–π

–ö–æ–Ω—Ç–∞–∫—Ç—ã:
+996(557) 35-88-75
@samat"""

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

# Telegram Application
application = Application.builder().token(BOT_TOKEN).build()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        save_users(users)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    await handle_hello(update, context)

async def handle_hello(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(IMAGE_PATH, 'rb') as photo_file:
            await update.message.reply_photo(photo=photo_file, caption=MESSAGE_TEXT)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        save_users(users)
        
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ "–ø—Ä–∏–≤–µ—Ç"
    text = update.message.text.lower()
    if text == "–ø—Ä–∏–≤–µ—Ç":
        await handle_hello(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def broadcast_message():
    users = load_users()
    for user_id in users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(IMAGE_PATH, 'rb') as photo_file:
                await application.bot.send_photo(
                    chat_id=user_id,
                    photo=photo_file,
                    caption=MESSAGE_TEXT
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
@app.on_event("startup")
async def startup():
    await application.initialize()
    await application.start()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 22:30
    scheduler.add_job(broadcast_message, "cron", hour=22, minute=30)
    scheduler.start()

@app.on_event("shutdown")
async def shutdown():
    scheduler.shutdown()
    await application.stop()
    await application.shutdown()

# Webhook –¥–ª—è Telegram
@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
@app.get("/")
def root():
    return {"status": "ok"}

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run("main:app", host="0.0.0.0", port=port)
